
===== Archivo: pages/Config.jsx =====

import React, { useState, useEffect } from "react";
import Header from "../components/Header";
import {
  User,
  Settings,
  Package,
  Search,
  Edit,
  Trash2,
  Plus,
} from "lucide-react";

import useFetchCollection from "../hooks/useFetchCollection";
import useCreateUser from "../hooks/useCreateUser";
import useUpdateUser from "../hooks/useUpdateUser";
import useDeleteUser from "../hooks/useDeleteUser";
import useCreateMachine from "../hooks/useCreateMachine";
import useUpdateMachine from "../hooks/useUpdateMachine";
import useDeleteMachine from "../hooks/useDeleteMachine";
import useCreatePiece from "../hooks/useCreatePiece";
import useUpdatePiece from "../hooks/useUpdatePiece";
import useDeletePiece from "../hooks/useDeletePiece";

import { Dialog } from "@headlessui/react";
import Notification from "../components/Notification";

// Modal para previsualizar imágenes
function ImagePreview({ url, onClose }) {
  return (
    <Dialog open={!!url} onClose={onClose} className="relative z-50">
      <div className="fixed inset-0 bg-black/50" />
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Dialog.Panel className="bg-white rounded-lg shadow-lg p-4 max-w-lg w-full">
          <img src={url} alt="Preview" className="w-full h-auto rounded" />
          <button
            onClick={onClose}
            className="mt-4 w-full py-2 bg-blue-600 text-white rounded-lg"
          >
            Cerrar
          </button>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
}

// Formulario genérico
function EntityForm({ type, initialData, onSubmit, onClose }) {
  const [formData, setFormData] = useState(
    initialData || {
      name: "",
      position: "",
      role: "Operario",
      imageURL: "",
      description: "",
      reference: "",
      type: "",
      cycleTime: "",
      category: "",
      material: "",
    }
  );
  const [error, setError] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (type === "Usuario") {
      if (!formData.name || !formData.position || !formData.role) {
        setError("Nombre, Cargo y Rol son obligatorios");
        return;
      }
    }
    if (type === "Máquina") {
      if (!formData.name || !formData.type) {
        setError("Nombre y Tipo son obligatorios");
        return;
      }
    }
    if (type === "Pieza") {
      if (!formData.name || !formData.category) {
        setError("Nombre y Categoría son obligatorios");
        return;
      }

      const cycleTimeValue = Number(formData.cycleTime);
      if (isNaN(cycleTimeValue) || cycleTimeValue <= 0) {
        setError("El tiempo de ciclo debe ser un número mayor a 0");
        return;
      }
    }

    setError("");
    onSubmit(formData);
    onClose();
  };

  return (
    <Dialog open={true} onClose={onClose} className="relative z-50">
      <div className="fixed inset-0 bg-black/40" aria-hidden="true" />
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Dialog.Panel className="bg-white rounded-lg shadow-lg max-w-md w-full p-6">
          <Dialog.Title className="text-lg font-bold mb-4">
            {initialData ? `Editar \${type}` : `Crear \${type}`}
          </Dialog.Title>
          {error && <p className="text-red-600 text-sm mb-3">{error}</p>}
          <form onSubmit={handleSubmit} className="space-y-4">
            {/* Usuarios */}
            {type === "Usuario" && (
              <>
                <input
                  type="text"
                  name="name"
                  placeholder="Nombre completo"
                  value={formData.name}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="position"
                  placeholder="Cargo"
                  value={formData.position || ""}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <select
                  name="role"
                  value={formData.role}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                >
                  <option value="Gerente">Gerente</option>
                  <option value="Supervisor">Supervisor</option>
                  <option value="Operario">Operario</option>
                </select>
                <input
                  type="text"
                  name="imageURL"
                  placeholder="URL de imagen"
                  value={formData.imageURL}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
              </>
            )}
            {/* Máquinas */}
            {type === "Máquina" && (
              <>
                <input
                  type="text"
                  name="name"
                  placeholder="Nombre"
                  value={formData.name}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="type"
                  placeholder="Tipo"
                  value={formData.type}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="description"
                  placeholder="Descripción"
                  value={formData.description}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="imageURL"
                  placeholder="URL de imagen"
                  value={formData.imageURL}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="reference"
                  placeholder="Referencia"
                  value={formData.reference}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
              </>
            )}
            {/* Piezas */}
            {type === "Pieza" && (
              <>
                <input
                  type="text"
                  name="name"
                  placeholder="Nombre"
                  value={formData.name}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="category"
                  placeholder="Categoría"
                  value={formData.category}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="number"
                  name="cycleTime"
                  placeholder="Tiempo de ciclo (minutos)"
                  value={formData.cycleTime}
                  onChange={handleChange}
                  step="any"
                  min="0.01"
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="description"
                  placeholder="Descripción"
                  value={formData.description}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="imageURL"
                  placeholder="URL de imagen"
                  value={formData.imageURL}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="reference"
                  placeholder="Referencia"
                  value={formData.reference}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
                <input
                  type="text"
                  name="material"
                  placeholder="Material"
                  value={formData.material}
                  onChange={handleChange}
                  className="w-full border px-3 py-2 rounded-lg"
                />
              </>
            )}
            <div className="flex justify-end gap-2">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 bg-gray-200 rounded-lg"
              >
                Cancelar
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-lg"
              >
                {initialData ? "Guardar" : "Crear"}
              </button>
            </div>
          </form>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
}

// Confirmación de eliminación
function ConfirmDelete({ isOpen, onClose, onConfirm, entityName }) {
  return (
    <Dialog open={isOpen} onClose={onClose} className="relative z-50">
      <div className="fixed inset-0 bg-black/40" />
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Dialog.Panel className="bg-white rounded-lg shadow-lg p-6 max-w-sm w-full">
          <h2 className="text-lg font-bold mb-4">Confirmar eliminación</h2>
          <p className="mb-4">¿Está seguro de eliminar {entityName}?</p>
          <div className="flex justify-end gap-2">
            <button
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 rounded-lg"
            >
              Cancelar
            </button>
            <button
              onClick={onConfirm}
              className="px-4 py-2 bg-red-600 text-white rounded-lg"
            >
              Eliminar
            </button>
          </div>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
}

// Columna genérica
function EntityColumn({ title, Icon, data, onCreate, onUpdate, onDelete }) {
  const [query, setQuery] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [showDelete, setShowDelete] = useState(false);
  const [deleteItem, setDeleteItem] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);
  const [notification, setNotification] = useState(null);

  
  const source = Array.isArray(data) ? data : (data && data.data ? data.data : data || {});
  const items = Array.isArray(source) ? source : Object.values(source || {});
  const filtered = (items || [])
    .slice()
    .sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0))
    .filter((item) =>
      (item.name || "").toLowerCase().includes(query.toLowerCase())
    );


  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => setNotification(null), 3000);
      return () => clearTimeout(timer);
    }
  }, [notification]);

  const handleCreate = async (formData) => {
    await onCreate(formData);
    setNotification(`\${title.slice(0, -1)} creado exitosamente`);
  };

  const handleUpdate = async (id, formData) => {
    await onUpdate(id, formData);
    setNotification(`\${title.slice(0, -1)} actualizado exitosamente`);
  };

  const handleDelete = async (id) => {
    await onDelete(id);
    setNotification(`\${title.slice(0, -1)} eliminado exitosamente`);
  };

  return (
    <div className="bg-white rounded-xl shadow-md p-6 border border-gray-200 flex flex-col">
      <div className="flex items-center gap-2 mb-4">
        <Icon className="text-blue-600" size={22} />
        <h2 className="text-lg font-semibold text-gray-800">{title}</h2>
      </div>

      <div className="relative mb-4">
        <Search className="absolute left-3 top-3 text-gray-400" size={18} />
        <input
          type="text"
          placeholder={`Buscar \${title.toLowerCase()}...`}
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
        />
      </div>

      <ul className="flex-1 space-y-3 overflow-y-auto">
        {filtered.map((item) => (
          <li
            key={item.id}
            className="flex items-center justify-between px-3 py-2 bg-gray-50 rounded-lg border border-gray-200"
          >
            <div className="flex items-center gap-3">
              {item.imageURL ? (
                <img
                  src={item.imageURL}
                  alt={item.name}
                  className="h-10 w-10 rounded-full object-cover border border-gray-300 cursor-pointer"
                  onClick={() => setPreviewImage(item.imageURL)}
                />
              ) : (
                <div className="h-10 w-10 flex items-center justify-center rounded-full bg-gray-200 text-gray-500">
                  <Icon size={20} />
                </div>
              )}
              <span className="text-gray-700 font-medium">{item.name}</span>
            </div>
            <div className="flex gap-2">
              <button
                className="p-1 text-blue-600 hover:text-blue-800 transition"
                onClick={() => {
                  setEditingItem(item);
                  setShowForm(true);
                }}
              >
                <Edit size={18} />
              </button>
              <button
                className="p-1 text-red-500 hover:text-red-700 transition"
                onClick={() => {
                  setDeleteItem(item);
                  setShowDelete(true);
                }}
              >
                <Trash2 size={18} />
              </button>
            </div>
          </li>
        ))}
        {filtered.length === 0 && (
          <p className="text-sm text-gray-400 italic text-center">
            No se encontraron resultados
          </p>
        )}
      </ul>

      <button
        className="mt-6 flex items-center justify-center gap-2 py-2 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition shadow-sm"
        onClick={() => {
          setEditingItem(null);
          setShowForm(true);
        }}
      >
        <Plus size={18} /> Crear {title.slice(0, -1)}
      </button>

      {showForm && (
        <EntityForm
          type={title.slice(0, -1)}
          initialData={editingItem}
          onSubmit={(data) =>
            editingItem
              ? handleUpdate(editingItem.id, data)
              : handleCreate(data)
          }
          onClose={() => setShowForm(false)}
        />
      )}

      {showDelete && deleteItem && (
        <ConfirmDelete
          isOpen={showDelete}
          onClose={() => setShowDelete(false)}
          onConfirm={() => {
            handleDelete(deleteItem.id);
            setShowDelete(false);
          }}
          entityName={deleteItem.name}
        />
      )}

      {previewImage && (
        <ImagePreview url={previewImage} onClose={() => setPreviewImage(null)} />
      )}
      {notification && (
        <Notification
          message={notification}
          onClose={() => setNotification(null)}
        />
      )}
    </div>
  );
}

// Vista principal
export default function Config() {
  const { data: users, loading: loadingUsers } = useFetchCollection("users");
  const { data: machines, loading: loadingMachines } = useFetchCollection("machines");
  const { data: pieces, loading: loadingPieces } = useFetchCollection("pieces");

  const { createUser } = useCreateUser();
  const { updateUser } = useUpdateUser();
  const { deleteUser } = useDeleteUser();

  const { createMachine } = useCreateMachine();
  const { updateMachine } = useUpdateMachine();
  const { deleteMachine } = useDeleteMachine();

  const { createPiece } = useCreatePiece();
  const { updatePiece } = useUpdatePiece();
  const { deletePiece } = useDeletePiece();

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-100 flex flex-col">
      <Header />
      <main className="flex-1 px-4 sm:px-8 py-10 max-w-7xl mx-auto w-full">
        <h1 className="text-3xl font-bold text-gray-900 mb-10 text-center">
          Configuración del Sistema
        </h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          <EntityColumn
            title="Usuarios"
            Icon={User}
            data={users}
            onCreate={createUser}
            onUpdate={updateUser}
            onDelete={deleteUser}
          />
          <EntityColumn
            title="Máquinas"
            Icon={Settings}
            data={machines}
            onCreate={createMachine}
            onUpdate={updateMachine}
            onDelete={deleteMachine}
          />
          <EntityColumn
            title="Piezas"
            Icon={Package}
            data={pieces}
            onCreate={createPiece}
            onUpdate={updatePiece}
            onDelete={deletePiece}
          />
        </div>
      </main>
    </div>
  );
}
