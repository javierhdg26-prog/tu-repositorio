
===== Archivo: components/ConfirmModal.jsx =====

// src/components/ConfirmModal.jsx
import React from "react";

const ConfirmModal = ({ isOpen, message, onConfirm, onCancel }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black/50">
      <div className="bg-white p-6 rounded shadow-lg w-80 text-center">
        <p className="mb-4">{message}</p>
        <div className="flex justify-center gap-4">
          <button
            onClick={onConfirm}
            className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
          >
            Confirmar
          </button>
          <button
            onClick={onCancel}
            className="px-4 py-2 bg-gray-400 text-white rounded hover:bg-gray-500"
          >
            Cancelar
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfirmModal;

===== Archivo: components/EntityCard.jsx =====

import React from "react";

export default function EntityCard({ item, onEdit, onDelete }) {
  return (
    <div className="flex items-center justify-between p-4 bg-white rounded-xl shadow hover:shadow-lg transition">
      <div className="flex items-center gap-4">
        {item.imageURL ? (
          <img
            src={item.imageURL}
            alt={item.name}
            className="w-12 h-12 rounded-full object-cover"
          />
        ) : (
          <div className="w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center text-gray-500">
            {item.name?.[0] || "?"}
          </div>
        )}
        <div>
          <h3 className="text-lg font-semibold text-gray-800">{item.name}</h3>
          {item.position && <p className="text-sm text-gray-500">{item.position}</p>}
          {item.reference && <p className="text-sm text-gray-500">Ref: {item.reference}</p>}
          {item.role && <p className="text-sm text-gray-500">Rol: {item.role}</p>}
        </div>
      </div>
      <div className="flex gap-2">
        <button
          onClick={onEdit}
          className="px-3 py-1 rounded-md bg-blue-500 text-white hover:bg-blue-600"
        >
          Editar
        </button>
        <button
          onClick={onDelete}
          className="px-3 py-1 rounded-md bg-red-500 text-white hover:bg-red-600"
        >
          Eliminar
        </button>
      </div>
    </div>
  );
}

===== Archivo: components/EntityColumn.jsx =====

import React from "react";
import EntityCard from "./EntityCard";

export default function EntityColumn({ title, Icon, data, onEdit, onDelete }) {
  return (
    <div className="bg-white shadow-md rounded-xl p-6">
      <div className="flex items-center mb-4">
        <Icon className="w-6 h-6 text-blue-600 mr-2" />
        <h2 className="text-xl font-bold text-gray-800">{title}</h2>
      </div>
      <div className="space-y-3">
        {data && data.length > 0 ? (
          data.map((item, idx) => (
            <EntityCard
              key={idx}
              item={item}
              onEdit={() => onEdit(item)}
              onDelete={() => onDelete(item)}
            />
          ))
        ) : (
          <p className="text-gray-500 text-sm">No hay registros</p>
        )}
      </div>
    </div>
  );
}

===== Archivo: components/EntityForm.jsx =====

// src/components/EntityForm.jsx
import React, { useState, useEffect } from "react";

const EntityForm = ({ onSubmit, initialData, onCancel }) => {
  const [formData, setFormData] = useState({ name: "", description: "" });

  useEffect(() => {
    if (initialData) {
      setFormData(initialData);
    }
  }, [initialData]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
    setFormData({ name: "", description: "" });
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="bg-gray-100 p-4 rounded shadow-md mb-4"
    >
      <input
        type="text"
        name="name"
        placeholder="Nombre"
        value={formData.name}
        onChange={handleChange}
        className="border rounded w-full px-2 py-1 mb-2"
        required
      />
      <textarea
        name="description"
        placeholder="Descripción"
        value={formData.description}
        onChange={handleChange}
        className="border rounded w-full px-2 py-1 mb-2"
      />
      <div className="flex gap-2">
        <button
          type="submit"
          className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Guardar
        </button>
        {onCancel && (
          <button
            type="button"
            onClick={onCancel}
            className="px-3 py-1 bg-gray-400 text-white rounded hover:bg-gray-500"
          >
            Cancelar
          </button>
        )}
      </div>
    </form>
  );
};

export default EntityForm;

===== Archivo: components/Header.jsx =====

import React, { useState } from "react";
import logo from "../assets/logo.svg";

export default function Header() {
  const [menuOpen, setMenuOpen] = useState(false);

  return (
    <header className="pb-4 bg-white lg:pb-0 shadow">
      <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
        {/* Navbar desktop */}
        <nav className="flex items-center justify-between h-16 lg:h-20">
          {/* Logo */}
          <div className="flex-shrink-0">
            <a href="/" title="SmartFlow" className="flex items-center">
              <img
                className="w-auto h-8 lg:h-10"
                src={logo}
                alt="SmartFlow Logo"
              />
            </a>
          </div>

          {/* Botón menú móvil */}
          <button
            type="button"
            onClick={() => setMenuOpen(!menuOpen)}
            className="inline-flex p-2 text-black transition-all duration-200 rounded-md lg:hidden focus:bg-gray-100 hover:bg-gray-100"
          >
            {/* Icono hamburguesa */}
            {!menuOpen && (
              <svg
                className="block w-6 h-6"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M4 8h16M4 16h16"
                />
              </svg>
            )}

            {/* Icono X */}
            {menuOpen && (
              <svg
                className="block w-6 h-6"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            )}
          </button>

          {/* Links desktop */}
          <div className="hidden lg:flex lg:items-center lg:ml-auto lg:space-x-10">
            <a
              href="#features"
              className="text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
            >
              Features
            </a>
            <a
              href="#solutions"
              className="text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
            >
              Solutions
            </a>
            <a
              href="#resources"
              className="text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
            >
              Resources
            </a>
            <a
              href="#pricing"
              className="text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
            >
              Pricing
            </a>
          </div>

          {/* Botón desktop */}
          <a
            href="#start"
            className="items-center justify-center hidden px-4 py-2 ml-6 text-base font-semibold text-white transition-all duration-200 bg-blue-600 border border-transparent rounded-md lg:inline-flex hover:bg-blue-700"
          >
            Get started
          </a>
        </nav>

        {/* Menú móvil desplegable */}
        {menuOpen && (
          <nav className="pt-4 pb-6 mt-2 bg-white border border-gray-200 rounded-md shadow-md lg:hidden">
            <div className="flow-root">
              <div className="flex flex-col px-6 -my-2 space-y-1">
                <a
                  href="#features"
                  className="inline-flex py-2 text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
                >
                  Features
                </a>
                <a
                  href="#solutions"
                  className="inline-flex py-2 text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
                >
                  Solutions
                </a>
                <a
                  href="#resources"
                  className="inline-flex py-2 text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
                >
                  Resources
                </a>
                <a
                  href="#pricing"
                  className="inline-flex py-2 text-base font-medium text-black transition-all duration-200 hover:text-blue-600"
                >
                  Pricing
                </a>
              </div>
            </div>
            <div className="px-6 mt-4">
              <a
                href="#start"
                className="inline-flex justify-center w-full px-4 py-2 text-base font-semibold text-white transition-all duration-200 bg-blue-600 rounded-md hover:bg-blue-700"
              >
                Get started
              </a>
            </div>
          </nav>
        )}
      </div>
    </header>
  );
}


