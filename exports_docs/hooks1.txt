
===== Archivo: hooks/index.js =====

// src/hooks/index.js
export { default as useFetchUsers } from "./useFetchUsers";
export { default as useCreateUser } from "./useCreateUser";
export { default as useUpdateUser } from "./useUpdateUser";
export { default as useDeleteUser } from "./useDeleteUser";

export { default as useFetchMachines } from "./useFetchMachines";
export { default as useCreateMachine } from "./useCreateMachine";
export { default as useUpdateMachine } from "./useUpdateMachine";
export { default as useDeleteMachine } from "./useDeleteMachine";

export { default as useFetchPieces } from "./useFetchPieces";
export { default as useCreatePiece } from "./useCreatePiece";
export { default as useUpdatePiece } from "./useUpdatePiece";
export { default as useDeletePiece } from "./useDeletePiece";

===== Archivo: hooks/useCreateMachine.js =====

import { db } from "../firebase/initFirebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";

const useCreateMachine = () => {
  const createMachine = async (machineData) => {
    try {
      await addDoc(collection(db, "machines"), {
        ...machineData,
        timestamp: serverTimestamp(),
      });
      return { success: true };
    } catch (error) {
      console.error("Error creando máquina:", error);
      return { success: false, error };
    }
  };

  return createMachine;
};

export default useCreateMachine;


===== Archivo: hooks/useCreateMachineType.js =====

import { db } from "../firebase/initFirebase";
import { collection, addDoc } from "firebase/firestore";

const useCreateMachineType = () => {
  const createMachineType = async (data) => {
    try {
      await addDoc(collection(db, "machineTypes"), data);
      return { success: true };
    } catch (error) {
      console.error("Error creando tipo de máquina:", error);
      return { success: false, error };
    }
  };

  return createMachineType;
};

export default useCreateMachineType;

===== Archivo: hooks/useCreatePiece.js =====

// src/hooks/useCreatePiece.js
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { db } from "../firebase/initFirebase";

export default function useCreatePiece() {
  const createPiece = async (data) => {
    try {
      await addDoc(collection(db, "pieces"), {
        ...data,
        timestamp: serverTimestamp(),
      });
      console.log("Pieza creada exitosamente");
    } catch (error) {
      console.error("Error al crear pieza:", error);
    }
  };

  return { createPiece };
}

===== Archivo: hooks/useCreatePieceCategory.js =====

import { db } from "../firebase/initFirebase";
import { collection, addDoc } from "firebase/firestore";

const useCreatePieceCategory = () => {
  const createPieceCategory = async (data) => {
    try {
      await addDoc(collection(db, "pieceCategories"), data);
      return { success: true };
    } catch (error) {
      console.error("Error creando categoría de pieza:", error);
      return { success: false, error };
    }
  };

  return createPieceCategory;
};

export default useCreatePieceCategory;

===== Archivo: hooks/useCreateUser.js =====

import { db } from "../firebase/initFirebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";

const useCreateUser = () => {
  const createUser = async (userData) => {
    try {
      await addDoc(collection(db, "users"), {
        ...userData,
        timestamp: serverTimestamp(),
      });
      return { success: true };
    } catch (error) {
      console.error("Error creando usuario:", error);
      return { success: false, error };
    }
  };

  return createUser;
};

export default useCreateUser;

===== Archivo: hooks/useDeleteMachine.js =====

import { db } from "../firebase/initFirebase";
import { doc, deleteDoc } from "firebase/firestore";

const useDeleteMachine = () => {
  const deleteMachine = async (id) => {
    try {
      await deleteDoc(doc(db, "machines", id));
      return { success: true };
    } catch (error) {
      console.error("Error eliminando máquina:", error);
      return { success: false, error };
    }
  };

  return deleteMachine;
};

export default useDeleteMachine;


===== Archivo: hooks/useDeleteMachineType.js =====

import { db } from "../firebase/initFirebase";
import { doc, deleteDoc } from "firebase/firestore";

const useDeleteMachineType = () => {
  const deleteMachineType = async (id) => {
    try {
      await deleteDoc(doc(db, "machineTypes", id));
      return { success: true };
    } catch (error) {
      console.error("Error eliminando tipo de máquina:", error);
      return { success: false, error };
    }
  };

  return deleteMachineType;
};

export default useDeleteMachineType;

===== Archivo: hooks/useDeletePiece.js =====

// src/hooks/useDeletePiece.js
import { doc, deleteDoc } from "firebase/firestore";
import { db } from "../firebase/initFirebase";

export default function useDeletePiece() {
  const deletePiece = async (id) => {
    try {
      const pieceRef = doc(db, "pieces", id);
      await deleteDoc(pieceRef);
      console.log("Pieza eliminada exitosamente");
    } catch (error) {
      console.error("Error al eliminar pieza:", error);
    }
  };

  return { deletePiece };
}


===== Archivo: hooks/useDeletePieceCategory.js =====

import { db } from "../firebase/initFirebase";
import { doc, deleteDoc } from "firebase/firestore";

const useDeletePieceCategory = () => {
  const deletePieceCategory = async (id) => {
    try {
      await deleteDoc(doc(db, "pieceCategories", id));
      return { success: true };
    } catch (error) {
      console.error("Error eliminando categoría de pieza:", error);
      return { success: false, error };
    }
  };

  return deletePieceCategory;
};

export default useDeletePieceCategory;

===== Archivo: hooks/useDeleteUser.js =====

import { db } from "../firebase/initFirebase";
import { doc, deleteDoc } from "firebase/firestore";

const useDeleteUser = () => {
  const deleteUser = async (id) => {
    try {
      await deleteDoc(doc(db, "users", id));
      return { success: true };
    } catch (error) {
      console.error("Error eliminando usuario:", error);
      return { success: false, error };
    }
  };

  return deleteUser;
};

export default useDeleteUser;

===== Archivo: hooks/useFetchCollection.js =====

// src/hooks/useFetchCollection.js
import { useState, useEffect } from "react";
import { collection, onSnapshot } from "firebase/firestore";
import { db } from "../firebase/initFirebase";

export default function useFetchCollection(collectionName) {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    setLoading(true);
    setError(null);

    try {
      const ref = collection(db, collectionName);
      const unsubscribe = onSnapshot(
        ref,
        (snapshot) => {
          const docs = snapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          }));
          setData(docs);
          setLoading(false);
        },
        (err) => {
          console.error("❌ Error Firestore:", err);
          setError(err.message);
          setLoading(false);
        }
      );

      return () => unsubscribe();
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  }, [collectionName]);

  return { data, loading, error };
}

===== Archivo: hooks/useFetchMachineTypes.js =====

// src/hooks/useFetchMachines.js
import { useState, useEffect } from "react";
import { collection, onSnapshot } from "firebase/firestore";
import { db } from "../firebase/initFirebase";

export default function useFetchMachines() {
  const [machines, setMachines] = useState([]);

  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, "machines"), (snapshot) => {
      const data = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));
      setMachines(data);
    });

    // 👇 Limpia el listener al desmontar
    return () => unsubscribe();
  }, []);

  return { machines };
}

===== Archivo: hooks/useFetchMachines.js =====

import { db } from "../firebase/initFirebase";
import { collection, getDocs } from "firebase/firestore";

const useFetchMachines = () => {
  const fetchMachines = async () => {
    try {
      const snapshot = await getDocs(collection(db, "machines"));
      return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error("Error obteniendo máquinas:", error);
      return [];
    }
  };

  return fetchMachines;
};

export default useFetchMachines;

===== Archivo: hooks/useFetchPieceCategories.js =====

import { db } from "../firebase/initFirebase";
import { collection, getDocs } from "firebase/firestore";

const useFetchPieceCategories = () => {
  const fetchPieceCategories = async () => {
    try {
      const snapshot = await getDocs(collection(db, "pieceCategories"));
      return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error("Error obteniendo categorías de piezas:", error);
      return [];
    }
  };

  return fetchPieceCategories;
};

export default useFetchPieceCategories;

===== Archivo: hooks/useFetchPieces.js =====

import { db } from "../firebase/initFirebase";
import { collection, getDocs } from "firebase/firestore";

const useFetchPieces = () => {
  const fetchPieces = async () => {
    try {
      const snapshot = await getDocs(collection(db, "pieces"));
      return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error("Error obteniendo piezas:", error);
      return [];
    }
  };

  return fetchPieces;
};

export default useFetchPieces;


===== Archivo: hooks/useFetchUsers.js =====

import { db } from "../firebase/initFirebase";
import { collection, getDocs } from "firebase/firestore";

const useFetchUsers = () => {
  const fetchUsers = async () => {
    try {
      const snapshot = await getDocs(collection(db, "users"));
      return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error("Error obteniendo usuarios:", error);
      return [];
    }
  };

  return fetchUsers;
};

export default useFetchUsers;

===== Archivo: hooks/useUpdateMachine.js =====

import { doc, updateDoc, serverTimestamp } from "firebase/firestore";
import { db } from "../firebase/initFirebase";

export default function useUpdateMachine() {
  const updateMachine = async (id, data) => {
    try {
      const ref = doc(db, "machines", id);
      await updateDoc(ref, {
        ...data,
        updatedAt: serverTimestamp(),
      });
      console.log("Máquina actualizada:", id);
    } catch (error) {
      console.error("Error al actualizar máquina:", error);
    }
  };

  return { updateMachine };
}


===== Archivo: hooks/useUpdateMachineType.js =====

import { db } from "../firebase/initFirebase";
import { doc, updateDoc } from "firebase/firestore";

const useUpdateMachineType = () => {
  const updateMachineType = async (id, data) => {
    try {
      await updateDoc(doc(db, "machineTypes", id), data);
      return { success: true };
    } catch (error) {
      console.error("Error actualizando tipo de máquina:", error);
      return { success: false, error };
    }
  };

  return updateMachineType;
};

export default useUpdateMachineType;
