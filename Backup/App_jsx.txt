import './App.css'; 
import React, { useState, useEffect, useCallback } from 'react';
import Login from './components/ui/Login';
import Dashboard from './components/ui/Dashboard';
import AlertRulesConfig from './components/ui/AlertRulesConfig';
import { Loader2 } from 'lucide-react';
import useProductionData from './components/hooks/useProductionData';

const App = () => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [message, setMessage] = useState({ text: '', type: '' });
    const [showMessage, setShowMessage] = useState(false);
    const [showConfig, setShowConfig] = useState(false);
    const [alertRules, setAlertRules] = useState({
        maxGridValue: 70,
        maxTime: 40,
        maxAlertCoefficient: 50,
        minGridValue: 0,
        minTime: 30,
        minAlertCoefficient: 20,
    });

    const { productionData, alerts } = useProductionData(isAuthenticated, alertRules);

    const handleLogin = useCallback(() => {
        setIsLoading(true);
        setTimeout(() => {
            setIsAuthenticated(true);
            setIsLoading(false);
            setMessage({ text: '¡Login exitoso!', type: 'success' });
            setShowMessage(true);
            setTimeout(() => setShowMessage(false), 3000);
        }, 1000);
    }, []);

    const handleLogout = useCallback(() => {
        setIsLoading(true);
        setTimeout(() => {
            setIsAuthenticated(false);
            setIsLoading(false);
            setMessage({ text: 'Sesión cerrada. ¡Vuelve pronto!', type: 'success' });
            setShowMessage(true);
            setTimeout(() => setShowMessage(false), 3000);
        }, 500);
    }, []);

    const handleShowConfig = useCallback(() => {
        setShowConfig(true);
    }, []);

    const handleCloseConfig = useCallback(() => {
        setShowConfig(false);
    }, []);

    const handleSaveRules = useCallback((newRules) => {
        setAlertRules(newRules);
        setShowConfig(false);
        setMessage({ text: 'Reglas de alerta actualizadas con éxito!', type: 'success' });
        setShowMessage(true);
        setTimeout(() => setShowMessage(false), 3000);
    }, []);

    return (
        <div className="font-sans antialiased text-gray-900 bg-gray-100 min-h-screen">
            {isLoading ? (
                <div className="flex items-center justify-center min-h-screen bg-gray-100">
                    <Loader2 className="animate-spin h-10 w-10 text-purple-500" />
                </div>
            ) : (
                isAuthenticated ? (
                    showConfig ? (
                        <AlertRulesConfig
                            onCloseConfig={handleCloseConfig}
                            alertRules={alertRules}
                            onSaveRules={handleSaveRules}
                            setMessage={setMessage}
                            setShowMessage={setShowMessage}
                        />
                    ) : (
                        <Dashboard
                            onLogout={handleLogout}
                            productionData={productionData}
                            alerts={alerts}
                            onShowConfig={handleShowConfig}
                            alertRules={alertRules}
                        />
                    )
                ) : (
                    <Login onLogin={handleLogin} isLoading={isLoading} firebaseReady={true} />
                )
            )}
            {showMessage && (
                <div className={`fixed bottom-4 right-4 p-4 rounded-xl shadow-lg font-bold text-white z-50 transition-transform duration-300 transform ${message.type === 'success' ? 'bg-green-500' : 'bg-red-500'}`}>
                    {message.text}
                </div>
            )}
        </div>
    );
};

export default App;